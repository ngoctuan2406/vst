{"version":3,"sources":["assets/images/logo.png","assets/images/banner.png","store/reducers/homeReducer.js","store/actions/homeActionTypes.js","store/reducers/combinedReducer.js","store/store.js","store/actions/homeAction.js","assets/js/homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initState","loading","data","homeReducer","state","action","type","console","log","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","login","payload","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","appId","measurementId","connect","dataHomeReport","dispatch","actions","bindActionCreators","Object","assign","homeActions","props","isMobile","window","innerWidth","useState","isOpened","setIsOpen","provider","GoogleAuthProvider","toggleNavBar","authenticate","branchName","signInWithPopup","then","result","credential","accessToken","user","catch","error","code","message","email","useEffect","Fragment","className","src","require","alt","title","href","onClick","icon","faTimes","color","faAlignJustify","App","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef185c24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5763f93b.png\";","module.exports = __webpack_public_path__ + \"static/media/banner.28161854.png\";","import * as homeActionTypes from '../actions/homeActionTypes';\r\n\r\nconst initState = {\r\n    loading: false,\r\n    data: {}\r\n}\r\nconst homeReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case homeActionTypes.LOGIN:\r\n            console.log('123');\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default homeReducer;","export const LOGIN = 'LOGIN';","import { combineReducers } from 'redux';\r\n\r\nimport homeReducer from './homeReducer';\r\n\r\nconst rootReducer = combineReducers({homeReducer});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers/combinedReducer';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import * as homeActionTypes from './homeActionTypes'\r\n\r\nexport function login() {\r\n    return {\r\n        type: homeActionTypes.LOGIN,\r\n        payload: {}\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as homeActions from '../../store/actions/homeAction';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAlignJustify, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport '../scss/homepage.scss';\r\nimport firebaseui from 'firebaseui';\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCUk3J1LGont_sZ79ZDxSNvnQF7eCVecuI\",\r\n    authDomain: \"pwa-app-3cab5.firebaseapp.com\",\r\n    databaseURL: \"https://pwa-app-3cab5.firebaseio.com\",\r\n    projectId: \"pwa-app-3cab5\",\r\n    storageBucket: \"pwa-app-3cab5.appspot.com\",\r\n    // messagingSenderId: \"323005802921\",\r\n    appId: \"1:323005802921:web:2d53e07338c078883ebcb8\",\r\n    measurementId: \"G-9EW1C5LSBQ\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst Hompage = (props) => {\r\n    const {actions, dataHomeReport} = props;\r\n    const isMobile = window.innerWidth >= 992 ? false : true;\r\n    const [isOpened, setIsOpen] = useState(false);\r\n    var provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const toggleNavBar = () => {\r\n        setIsOpen(isOpened => !isOpened);\r\n    };\r\n\r\n    const authenticate = (branchName) => {\r\n        console.log('branchName', branchName);\r\n        firebase.auth().signInWithPopup(provider).then(function(result) {\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            var token = result.credential.accessToken;\r\n            // The signed-in user info.\r\n            var user = result.user;\r\n            // ...\r\n        }).catch(function(error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    return <React.Fragment>\r\n        {(isOpened || !isMobile)\r\n            ? <nav className=\"navbar\">\r\n                <div className=\"navbar-top\">\r\n                    <img className=\"logo-img\"\r\n                         src={require(\"../images/logo.png\")}\r\n                         alt=\"Vingroup\" title=\"Vingroup\"/>\r\n                    <a href=\"#!\" className=\"btn-close d-lg-none\" onClick={() => toggleNavBar()}>\r\n                        <FontAwesomeIcon icon={faTimes} color=\"black\" />\r\n                    </a>\r\n                </div>\r\n                <div className=\"navbar-bottom\">\r\n                    <a href=\"#!\" className=\"nav-item\">Vinhomes</a>\r\n                    <a href=\"#!\" className=\"nav-item\">Vinpearl</a>\r\n                    <a href=\"#!\" className=\"nav-item\">Vinmec</a>\r\n                    <a href=\"#!\" className=\"nav-item\">Vinfast</a>\r\n                    <a href=\"#!\" className=\"nav-item\">VSmart</a>\r\n                </div>\r\n            </nav>\r\n            : null}\r\n\r\n        <header className=\"d-lg-none\">\r\n            <img className=\"logo-img\"\r\n                 src={require(\"../images/logo.png\")}\r\n                 alt=\"Vingroup\" title=\"Vingroup\"/>\r\n            <a href=\"#!\" className=\"navbar-toggler\" onClick={() => toggleNavBar()}>\r\n                <FontAwesomeIcon icon={faAlignJustify} color=\"black\" />\r\n            </a>\r\n        </header>\r\n\r\n        <main>\r\n            <img className=\"banner\"\r\n                 src={require(\"../images/banner.png\")}\r\n                 alt=\"Home Banner\"/>\r\n\r\n            <div className=\"login\">\r\n                <p>Please click button below to sign in!</p>\r\n                <button className=\"google\" onClick={() => authenticate(\"Google\")}>\r\n                    Log In With Google\r\n                </button>\r\n                <button className=\"facebook\" onClick={() => authenticate(\"Facebook\")}>\r\n                    Log In With Facebook\r\n                </button>\r\n            </div>\r\n        </main>\r\n\r\n        {isOpened ? <div className=\"overlay\" title=\"close side menu\" onClick={() => toggleNavBar()}></div> : null}\r\n    </React.Fragment>\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dataHomeReport: state.homeReducer,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    actions: bindActionCreators(Object.assign({}, homeActions), dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hompage);","import React, {Component} from 'react';\r\nimport {Router, browserHistory, Route, Link} from 'react-router';\r\nimport './App.scss';\r\nimport Hompage from \"./assets/js/homepage\";\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.scss';\r\nvar firebase = require('firebase');\r\nvar firebaseui = require('firebaseui');\r\n\r\nconst NavBar = () => (\r\n    <div className=\"navbar\">\r\n        <Link to=\"/\">Feed</Link>\r\n        <Link to=\"/profile\">Profile</Link>\r\n    </div>\r\n);\r\n\r\nconst Template = ({title}) => (\r\n    <div>\r\n        <NavBar/>\r\n        <p className=\"page-info\">\r\n            This is the {title} page.\r\n        </p>\r\n    </div>\r\n);\r\n\r\nconst Feed = (props) => (\r\n    <Template title=\"Feed\"/>\r\n);\r\n\r\nconst Profile = (props) => (\r\n    <Template title=\"Profile\"/>\r\n);\r\n\r\nclass App extends Component {\r\n    render () {\r\n        return (\r\n            <Hompage/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/store'\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}